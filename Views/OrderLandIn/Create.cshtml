@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript" src="/js/upload/plupload.full.min.js"></script>
<link href="/js/Extjs42/resources/css/ext-all-gray.css" rel="stylesheet" type="text/css" />
<script src="/js/Extjs42/bootstrap.js" type="text/javascript"></script>
<link href="~/css/bootstrap32/css/bootstrap.css" rel="stylesheet" />
<link href="/css/comme.css" rel="stylesheet" />
<link href="~/css/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
<script src="/js/pan.js" type="text/javascript"></script>
<script src="/js/jsyz.js"></script>
<script src="/js/orderEdit.js"></script>
<script src="/js/commondata.js"></script>
<script type="text/javascript">
    var ID = getQueryString("OrderId");
    var Copy = getQueryString("Copy");
    var saveAction = ID ? "saveUpdate" : "saveAdd";
    var uploader; 
    var currBusiType = 31;
    var formpanel, store, combo_filetype, field_FILETYPENAME, combo_notype, field_noinput, store_myfs, field_CUSNO, field_bgch, field_CODE, field_CanEditFieldJson;
    var store_jydw, combo_jydw, field_BUSIUNITNAME, combo_myfs, field_TRADEWAYCODES, field_TRADEWAYCODES1, field_BUSIUNITNAME, field_BUSISHORTCODE, field_BUSISHORTNAME, field_contractno;
    var tf_bjsbdw, cont_bjsbdw, tf_bgsbdw, cont_bgsbdw, store_CUSTOMDISTRICTNAME, combo_CUSTOMDISTRICTNAME, store_REPUNITCODE, store_INSPUNITCODE;
    var store_PORTNAME, combo_PORTCODE, store_bgch, combo_mzbz, field_CLEARANCENO, combo_ENTRUSTTYPENAME, combo_REPWAYNAME, field_CSNAME, field_CSPHONE;
    var field_SUBMITUSERNAME, field_SUBMITTIME, field_SUBMITUSERPHONE, combo_containerno, field_containerno, field_ContainerJson, combo_bgch;
    var field_ID, field_ORDERWAY, fileview, field_INSPUNITNAME, field_CREATEUSERNAME, field_STATUS, store_filetype, container_bgch, field_DIVIDENO, field_CUSTOMDISTRICTNAME;
    var maximumformpaneltabIndex = 27;

    var fileViewWin;
    var FILETYPEIDNUM = new FILETYPEIDNUM();
    var FILETYPEIDNUMArray = new Array();
    var repunitcode, inspunitcode;

    var common_data_jydw = [], common_data_sbfs = [], common_data_sbgq = [], common_data_bgfs = [], common_data_bzzl = [],
        common_data_myfs = [], common_data_truckno = [], common_data_mzbz = [];
    Ext.onReady(function () {
        Ext.Ajax.request({
            url: "/OrderDomestic/Ini_Base_Data",
            params: {
                busitype: "陆运进口"
            },
            success: function (response, opts) {
                var commondata = Ext.decode(response.responseText)
                common_data_jydw = commondata.jydw;//经营单位
                common_data_sbfs = commondata.sbfs;//申报方式
                common_data_sbgq = commondata.sbgq;//申报关区 进口口岸
                common_data_bgfs = commondata.bgfs;//报关方式
                common_data_bzzl = commondata.bzzl;//包装种类
                common_data_myfs = commondata.myfs;//贸易方式
                common_data_mzbz = commondata.mzbz;//木质包装
                common_data_truckno = commondata.truckno;//报关车号
                cur_usr = commondata.cur_usr;//当前用户
                fileViewWin = initFileViewWin(fileViewWin);
                var label_baseinfo = {
                    xtype: 'label',
                    margin: '5',
                    html: '<h4 style="margin-top:2px;margin-bottom:2px"><span class="label label-default"><i class="fa fa-chevron-circle-down"></i>&nbsp;基础信息</span></h4>'
                }
                field_CanEditFieldJson = Ext.create('Ext.form.field.Hidden', {
                    name: 'CanEditFieldJson',
                    readOnly: true
                })
                var store_notype = Ext.create('Ext.data.JsonStore', {
                    fields: ['NUMBER', 'NAME'],
                    data: [{ NUMBER: 1, NAME: '订单编号' }, { NUMBER: 2, NAME: '客户编号' }, { NUMBER: 3, NAME: '分单号' }]
                })
                combo_notype = Ext.create('Ext.form.field.ComboBox', {//编号类型
                    width: 75,
                    value: 1,
                    name: 'NUMBERTYPE',
                    store: store_notype,
                    displayField: 'NAME',
                    valueField: 'NUMBER',
                    triggerAction: 'all',
                    forceSelection: true,
                    queryMode: 'local',
                    listeners: { focus: function () { combo_notype.expand(); } }
                })

                //是否显示“调用ERP按钮”
                if (validateErpCompetence() == 1) {
                    var tbar_r = '<div class="btn-group fl" role="group">'
                           + '<button type="button" onclick="LoadOrderErp()" class="btn btn-primary btn-sm"><i class="fa fa-exchange fa-fw"></i>&nbsp;调用ERP</button>'
                           + '<button type="button" onclick="LoadOrder()" class="btn btn-primary btn-sm"><i class="fa fa-search"></i>&nbsp;查询</button></div>';
                } else {
                    var tbar_r = '<div class="btn-group fl" role="group">'
                           + '<button type="button" onclick="LoadOrder()" class="btn btn-primary btn-sm"><i class="fa fa-search"></i>&nbsp;查询</button></div>';
                }

                field_noinput = Ext.create('Ext.form.field.Text', {
                    name: 'NUMBER',
                    id: 'NUMBER',
                    tabIndex: 1
                })
                var tbar = Ext.create('Ext.toolbar.Toolbar', {
                    items: [label_baseinfo, '->', combo_notype, field_noinput, tbar_r]
                })

                field_CODE = Ext.create('Ext.form.field.Text', {//订单编号
                    name: 'CODE',
                    fieldLabel: '订单编号',
                    readOnly: true,
                    emptyText: '订单号自动生成'
                })

                var store_ENTRUSTTYPENAME = Ext.create('Ext.data.JsonStore', {
                    fields: ['CODE', 'NAME'],
                    data: wtlx_js_data
                })

                combo_ENTRUSTTYPENAME = Ext.create('Ext.form.field.ComboBox', {//委托类型
                    name: 'ENTRUSTTYPEID',
                    hideTrigger: true,
                    store: store_ENTRUSTTYPENAME,
                    fieldLabel: '委托类型',
                    displayField: 'NAME',
                    valueField: 'CODE',
                    triggerAction: 'all',
                    forceSelection: true,
                    tabIndex: 2,
                    queryMode: 'local',
                    anyMatch: true,
                    listeners: {
                        focus: function () { if (combo_ENTRUSTTYPENAME.getValue() == null) { combo_ENTRUSTTYPENAME.expand() }; },
                        select: function (field, newValue) {
                            SetBgbjdw();
                        }
                    },
                    allowBlank: false,
                    blankText: '委托类型不能为空!'
                })

                var store_REPWAYNAME = Ext.create('Ext.data.JsonStore', {
                    fields: ['CODE', 'NAME'],
                    data: common_data_sbfs
                })
                combo_REPWAYNAME = Ext.create('Ext.form.field.ComboBox', {//申报方式
                    name: 'REPWAYID',
                    store: store_REPWAYNAME,
                    hideTrigger: true,
                    fieldLabel: '申报方式',
                    displayField: 'NAME',
                    valueField: 'CODE',
                    labelAlign: 'right',
                    triggerAction: 'all',
                    forceSelection: true,
                    tabIndex: 3,
                    queryMode: 'local',
                    anyMatch: true,
                    listeners: {
                        focus: function (cb) {
                            if (!cb.getValue()) {
                                cb.clearInvalid();
                                cb.store.clearFilter();
                                cb.expand()
                            }
                        },
                        select: function (field, newValue) {
                            LoadButtonStyle();
                        }
                    },
                    allowBlank: false,
                    blankText: '申报方式不能为空!'
                })

                store_CUSTOMDISTRICTNAME = Ext.create('Ext.data.JsonStore', {
                    fields: ['CODE', 'NAME'],
                    data: common_data_sbgq
                })

                field_CUSTOMDISTRICTNAME = Ext.create('Ext.form.field.Hidden', {
                    name: 'CUSTOMDISTRICTNAME'
                })

                combo_CUSTOMDISTRICTNAME = Ext.create('Ext.form.field.ComboBox', {//申报关区 这个数据比较多需要根据输入字符到后台动态模糊匹配
                    name: 'CUSTOMDISTRICTCODE',
                    store: store_CUSTOMDISTRICTNAME,
                    fieldLabel: '申报关区',
                    displayField: 'NAME',
                    valueField: 'CODE',
                    queryMode: 'local',
                    hideTrigger: true,
                    forceSelection: true,
                    anyMatch: true,
                    minChars: 2,
                    listeners: {
                        focus: function (cb) {
                            if (!cb.getValue()) {
                                cb.clearInvalid();
                                cb.store.clearFilter();
                            }
                        }
                    },
                    tabIndex: 4,
                    allowBlank: false,
                    blankText: '申报关区不能为空!',
                    listConfig: {
                        maxHeight: 110,
                        getInnerTpl: function () {
                            return '<div>{NAME}</div>';
                        }
                    }
                })

                ////报关申报单位
                //store_REPUNITCODE = Ext.create('Ext.data.JsonStore', {
                //    fields: ['HSCODE', 'NAME'],
                //    data: bgsbdw_js_data
                //})
                //combo_REPUNITCODE = Ext.create('Ext.form.field.ComboBox', {
                //    name: 'REPUNITCODE',
                //    store: store_REPUNITCODE,
                //    fieldLabel: '报关申报单位',
                //    displayField: 'NAME',
                //    valueField: 'HSCODE',
                //    queryMode: 'local',
                //    hideTrigger: true,
                //    forceSelection: true,
                //    tabIndex: 5,
                //    anyMatch: true,
                //    listeners: {
                //        focus: function (cb) {
                //            if (!cb.getValue()) {
                //                cb.clearInvalid();
                //                cb.store.clearFilter();
                //                cb.expand()
                //            }
                //        },
                //        select: function (records) {
                //            field_REPUNITNAME.setValue(records.rawValue.substr(0, records.rawValue.lastIndexOf('(')));
                //        }
                //    },
                //    allowBlank: false,
                //    blankText: '报关申报单位不能为空!',
                //    listConfig: {
                //        maxHeight: 110,
                //        getInnerTpl: function () {
                //            return '<div>{NAME}</div>';
                //        }
                //    }
                //})
                //field_REPUNITNAME = Ext.create('Ext.form.field.Hidden', {
                //    name: 'REPUNITNAME'
                //})
                //报关申报单位
                tf_bgsbdw = Ext.create('Ext.form.field.Text', {
                    readOnly: true,
                    name: 'REPUNITCODE',
                    margin: 0,
                    flex: .85,
                })
                cont_bgsbdw = Ext.create('Ext.form.FieldContainer', {
                    fieldLabel: '报关申报单位',
                    layout: 'hbox',
                    items: [tf_bgsbdw, { id: 'clickbgsbdw', xtype: 'button', listeners: { click: function () { bgsbdw_win(tf_bgsbdw); } }, text: '<span class="glyphicon glyphicon-search"></span>', flex: .15, margin: 0 }]
                })

                var store_DECLWAY = Ext.create('Ext.data.JsonStore', {
                    fields: ['CODE', 'NAME'],
                    data: common_data_bgfs
                })
                var combo_DECLWAY = Ext.create('Ext.form.field.ComboBox', {//报关方式
                    name: 'DECLWAY',
                    hideTrigger: true,
                    store: store_DECLWAY,
                    fieldLabel: '报关方式',
                    displayField: 'NAME',
                    valueField: 'CODE',
                    triggerAction: 'all',
                    forceSelection: true,
                    tabIndex: 6,
                    queryMode: 'local',
                    anyMatch: true,
                    listeners: {
                        focus: function (cb) {
                            if (!cb.getValue()) {
                                cb.clearInvalid();
                                cb.store.clearFilter();
                                cb.expand()
                            }
                        }
                    },
                    allowBlank: false,
                    blankText: '报关方式不能为空!'
                })
                field_SUBMITUSERNAME = Ext.create('Ext.form.field.Text', {//委托人员
                    name: 'SUBMITUSERNAME',
                    fieldLabel: '委托人员',
                    readOnly: true
                });

                field_SUBMITTIME = Ext.create('Ext.form.field.Text', {//委托时间
                    name: 'SUBMITTIME1',
                    fieldLabel: '委托时间',
                    readOnly: true
                });

                //委托电话
                field_SUBMITUSERPHONE = Ext.create('Ext.form.field.Text', {
                    name: 'SUBMITUSERPHONE',
                    fieldLabel: '委托电话',
                    readOnly: true
                })

                ////报检申报单位
                //store_INSPUNITCODE = Ext.create('Ext.data.JsonStore', {
                //    fields: ['CIQCODE', 'NAME'],
                //    data: bjsbdw_js_data
                //})
                //combo_INSPUNITCODE = Ext.create('Ext.form.field.ComboBox', {
                //    name: 'INSPUNITCODE',
                //    store: store_INSPUNITCODE,
                //    fieldLabel: '报检申报单位',
                //    displayField: 'NAME',
                //    valueField: 'CIQCODE',
                //    queryMode: 'local',
                //    hideTrigger: true,
                //    forceSelection: true,
                //    tabIndex: 8,
                //    anyMatch: true,
                //    listeners: {
                //        focus: function (cb) {
                //            if (!cb.getValue()) {
                //                cb.clearInvalid();
                //                cb.store.clearFilter();
                //                cb.expand()
                //            }
                //        },
                //        select: function (records) { field_INSPUNITNAME.setValue(records.rawValue.substr(0, records.rawValue.lastIndexOf('('))); }
                //    },
                //    allowBlank: false,
                //    blankText: '报检申报单位不能为空!',
                //    listConfig: {
                //        maxHeight: 110,
                //        getInnerTpl: function () {
                //            return '<div>{NAME}</div>';
                //        }
                //    }
                //})
                //field_INSPUNITNAME = Ext.create('Ext.form.field.Hidden', {
                //    name: 'INSPUNITNAME'
                //})
                //报检申报单位
                tf_bjsbdw = Ext.create('Ext.form.field.Text', {
                    readOnly: true,
                    name: 'INSPUNITCODE',
                    margin: 0,
                    flex: .85,
                })
                cont_bjsbdw = Ext.create('Ext.form.FieldContainer', {
                    fieldLabel: '报检申报单位',
                    layout: 'hbox',
                    items: [tf_bjsbdw, { id: 'clickbjsbdw', xtype: 'button', listeners: { click: function () { bjsbdw_win(tf_bjsbdw); } }, text: '<span class="glyphicon glyphicon-search"></span>', flex: .15, margin: 0 }]
                })

                field_CREATEUSERNAME = Ext.create('Ext.form.field.Text', {//维护人员
                    name: 'CREATEUSERNAME',
                    fieldLabel: '维护人员',
                    readOnly: true
                });
                field_CREATETIME = Ext.create('Ext.form.field.Text', {//维护时间
                    name: 'CREATETIME1',
                    fieldLabel: '维护时间',
                    readOnly: true
                });
                field_CSNAME = Ext.create('Ext.form.field.Text', {//平台客服
                    name: 'CSNAME',
                    fieldLabel: '平台客服',
                    readOnly: true
                });
                field_CSPHONE = Ext.create('Ext.form.field.Text', {//客服电话
                    name: 'CSPHONE',
                    fieldLabel: '客服电话',
                    readOnly: true
                });
                field_STATUS = Ext.create('Ext.form.field.Text', {//业务状态
                    name: 'STATUSNAME',
                    fieldLabel: '业务状态',
                    readOnly: true,
                    labelWidth: 80
                });

                var label_busiinfo = {
                    columnWidth: .70,
                    xtype: 'label',
                    margin: '0 0 5 5',
                    html: '<h4 style="margin-top:2px;margin-bottom:2px"><span class="label label-default"><i class="fa fa-chevron-circle-down"></i>&nbsp;业务信息</span></h4>'
                }
                var chk_2 = Ext.create('Ext.form.field.Checkbox', {
                    fieldLabel: '价格影响确认',
                    tabIndex: -1,
                    readOnly: true,
                    name: 'PRICEIMPACT'
                });
                var chk_spe_relation = Ext.create('Ext.form.field.Checkbox', {
                    fieldLabel: '特殊关系确认',
                    tabIndex: -1,
                    name: 'SPECIALRELATIONSHIP',
                    listeners: {
                        change: function (me, newValue, oldValue, eOpts) {
                            if (newValue == true) {
                                chk_2.setReadOnly(false);
                            } else {
                                chk_2.setValue(false);
                                chk_2.setReadOnly(true);
                            }
                        }
                    }
                });
                var chk_3 = Ext.create('Ext.form.field.Checkbox', {
                    labelWidth: 125,
                    fieldLabel: '支付特许权使用费确认',
                    tabIndex: -1,
                    name: 'PAYPOYALTIES'
                });
                var chk_container = {
                    columnWidth: .30,
                    border: 2,
                    height: 25,
                    style: {
                        borderColor: '#e9b477',
                        borderStyle: 'solid'
                    },
                    xtype: 'fieldcontainer',
                    layout: 'hbox',
                    items: [chk_spe_relation, chk_2, chk_3]
                }

                field_CUSNO = Ext.create('Ext.form.field.Text', {//客户编号
                    name: 'CUSNO',
                    tabIndex: 9,
                    fieldLabel: '客户编号'
                });

                //进口口岸
                store_PORTNAME = Ext.create('Ext.data.JsonStore', {
                    fields: ['CODE', 'NAME'],
                    data: common_data_sbgq
                })
                combo_PORTCODE = Ext.create('Ext.form.field.ComboBox', {//和申报关区一样 这个数据比较多需要根据输入字符到后台动态模糊匹配
                    name: 'PORTCODE',
                    store: store_PORTNAME,
                    fieldLabel: '进口口岸',
                    displayField: 'NAME',
                    valueField: 'CODE',
                    queryMode: 'local',
                    minChars: 2,
                    hideTrigger: true,
                    anyMatch: true,
                    forceSelection: true,
                    listeners: {
                        focus: function (cb) {
                            if (!cb.getValue()) {
                                cb.clearInvalid();
                                cb.store.clearFilter();
                            }
                        },
                        select: function (records) { field_PORTNAME.setValue(records.rawValue.substr(0, records.rawValue.lastIndexOf('('))); }
                    },
                    tabIndex: 10,
                    allowBlank: false,
                    blankText: '进口口岸不能为空!',
                    listConfig: {
                        maxHeight: 110,
                        getInnerTpl: function () {
                            return '<div>{NAME}</div>';
                        }
                    }
                })

                var field_PORTNAME = Ext.create('Ext.form.field.Hidden', {
                    name: 'PORTNAME'
                })

                //航次号LADINGBILLNO 变更为航次号 FILGHTNO by panhuaguo 2016-4-18
                var flightno = Ext.create('Ext.form.field.Text', {
                    id: 'FILGHTNO',
                    name: 'FILGHTNO',
                    tabIndex: 12,
                    enforceMaxLength: true,
                    maxLength: 11,
                    fieldLabel: '航次号'
                });
                //总单号
                field_DIVIDENO = Ext.create('Ext.form.field.Text', {
                    name: 'DIVIDENO',
                    tabIndex: 13,
                    fieldLabel: '分单号'
                });

                //经营单位combostore
                store_jydw = Ext.create('Ext.data.JsonStore', {
                    fields: ['CODE', 'NAME', 'QUANCODE', 'QUANNAME', 'SHORTNAME'],
                    data: common_data_jydw
                })
                combo_jydw = Ext.create('Ext.form.field.ComboBox', {//经营单位 这个数据比较多需要根据输入字符到后台动态模糊匹配,如果取不到点击添加按钮从总库进行选择，同时添加到自有客户库
                    name: 'BUSIUNITCODE',
                    store: store_jydw,
                    displayField: 'NAME',
                    valueField: 'QUANCODE',
                    queryMode: 'local',
                    margin: 0,
                    forceSelection: true,
                    tabIndex: 11,
                    anyMatch: true,
                    hideTrigger: true,
                    minChars: 2,
                    listeners: {
                        focus: function (cb) {
                            if (!cb.getValue()) {
                                cb.clearInvalid();
                                cb.store.clearFilter();
                            }
                        },
                        select: function (combo, records) {
                            field_BUSIUNITNAME.setValue(records[0].get("QUANNAME"));
                            field_BUSISHORTCODE.setValue(records[0].get("CODE"));
                            field_BUSISHORTNAME.setValue(records[0].get("SHORTNAME"));
                        }
                    },
                    flex: .85,
                    allowBlank: false,
                    blankText: '经营单位不能为空!',
                    listConfig: {
                        maxHeight: 110,
                        getInnerTpl: function () {
                            return '<div>{NAME}</div>';
                        }
                    }
                })

                var field_jydw = {
                    xtype: 'fieldcontainer',
                    fieldLabel: '经营单位',
                    layout: 'hbox',
                    items: [combo_jydw, {
                        id: 'clickjydw', xtype: 'button', handler: function () {
                            selectjydw(combo_jydw, field_BUSIUNITNAME, field_BUSISHORTCODE, field_BUSISHORTNAME);
                        },
                        text: '<span class="glyphicon glyphicon-search"></span>', flex: .15, margin: 0
                    }]
                }
                field_BUSIUNITNAME = Ext.create('Ext.form.field.Hidden', {
                    name: 'BUSIUNITNAME'
                })
                field_BUSISHORTCODE = Ext.create('Ext.form.field.Hidden', {
                    name: 'BUSISHORTCODE'
                })
                field_BUSISHORTNAME = Ext.create('Ext.form.field.Hidden', {
                    name: 'BUSISHORTNAME'
                })
                var store_PACKKINDNAME = Ext.create('Ext.data.JsonStore', {
                    fields: ['CODE', 'NAME'],
                    data: common_data_bzzl
                })

                var combo_PACKKINDNAME = Ext.create('Ext.form.field.ComboBox', {//包装类型
                    name: 'PACKKIND',
                    hideTrigger: true,
                    store: store_PACKKINDNAME,
                    displayField: 'NAME',
                    valueField: 'CODE',
                    triggerAction: 'all',
                    forceSelection: true,
                    tabIndex: 15,
                    margin: 0,
                    flex: .5,
                    queryMode: 'local',
                    anyMatch: true,
                    listeners: {
                        focus: function (cb) {
                            if (!cb.getValue()) {
                                cb.clearInvalid();
                                cb.store.clearFilter();
                                cb.expand()
                            }
                        }
                    },
                    listConfig: {
                        maxHeight: 110
                    }
                })

                //件数/包装
                var field_quanpackage = {
                    xtype: 'fieldcontainer',
                    fieldLabel: '件数/包装',
                    layout: 'hbox',
                    items: [{
                        id: 'GOODSNUM', name: 'GOODSNUM', xtype: 'numberfield', tabIndex: 14, flex: .5, margin: 0, hideTrigger: true
                    }, combo_PACKKINDNAME]
                }

                ////毛重/净重
                //var field_weight = {
                //    xtype: 'fieldcontainer',
                //    fieldLabel: '毛重/净重',
                //    layout: 'hbox',
                //    items: [
                //        { id: 'GOODSGW', name: 'GOODSGW', xtype: 'numberfield', flex: .5, tabIndex: 16, margin: 0, allowBlank: false, blankText: '不能为空!', hideTrigger: true, decimalPrecision: 4 },
                //       {
                //           id: 'GOODSNW', name: 'GOODSNW', xtype: 'numberfield', flex: .5, tabIndex: 17, margin: 0, hideTrigger: true, decimalPrecision: 4,
                //           listeners:
                //           {
                //               change: function (field, e) {
                //                   var GOODSGWValue = Ext.getCmp('GOODSGW').getValue();
                //                   var value = field.getValue();
                //                   if (value > GOODSGWValue) {
                //                       Ext.MessageBox.alert("提示", "净重应该小于等于毛重");
                //                       Ext.getCmp('GOODSNW').setValue("");
                //                   }
                //               }
                //           }
                //       }]
                //}
                var field_weight = { //毛重/净重
                    xtype: 'fieldcontainer',
                    fieldLabel: '毛重/净重',
                    layout: 'hbox',
                    items: [{ id: 'GOODSGW', name: 'GOODSGW', xtype: 'numberfield', flex: .5, msgTarget: 'qtip', tabIndex: 16, margin: 0, allowBlank: false, blankText: '不能为空!', hideTrigger: true, vtype: 'gwnwrule', decimalPrecision: 4 },
                            { id: 'GOODSNW', name: 'GOODSNW', xtype: 'numberfield', flex: .5, msgTarget: 'qtip', tabIndex: 17, margin: 0, hideTrigger: true, vtype: 'gwnwrule', decimalPrecision: 4 }]
                }

                //合同号
                field_contractno = Ext.create('Ext.form.field.Text', {
                    fieldLabel: '合同号',
                    tabIndex: 18,
                    name: 'CONTRACTNO'
                });

                //载货清单号
                var field_MANIFEST = Ext.create('Ext.form.field.Text', {
                    tabIndex: 20,
                    fieldLabel: '载货清单号',
                    name: 'MANIFEST'
                });

                store_myfs = Ext.create('Ext.data.JsonStore', {
                    fields: ['CODE', 'NAME'],
                    data: common_data_myfs
                })

                combo_myfs = Ext.create('Ext.form.field.ComboBox', {//贸易方式
                    name: 'TRADEWAYCODES_ZS',
                    store: store_myfs,
                    displayField: 'CODE',
                    valueField: 'CODE',
                    queryMode: 'local',
                    anyMatch: true,
                    forceSelection: true,
                    tabIndex: 19,
                    hideTrigger: true,
                    multiSelect: false,
                    listeners: {
                        focus: function (cb) {
                            if (!cb.getValue()) {
                                cb.clearInvalid();
                                cb.store.clearFilter();
                                cb.expand()
                            }
                        },
                        select: function (records) { field_TRADEWAYCODES1.setValue(records.rawValue); field_TRADEWAYCODES.setValue(records.rawValue.substr(0, 4)); }
                    },
                    flex: 0.85,
                    margin: 0,
                    listConfig: {
                        maxHeight: 110,
                        getInnerTpl: function () {
                            return '<div>{NAME}</div>';
                        }
                    }
                , allowBlank: false,
                    blankText: '贸易方式不能为空!'
                })

                field_TRADEWAYCODES = Ext.create('Ext.form.field.Hidden', {
                    name: 'TRADEWAYCODES'
                });
                field_TRADEWAYCODES1 = Ext.create('Ext.form.field.Hidden', {
                    name: 'TRADEWAYCODES1'
                });
                //贸易方式
                var field_myfs = {
                    xtype: 'fieldcontainer',
                    fieldLabel: '贸易方式',
                    layout: 'hbox',
                    items: [combo_myfs, { id: 'clickmyfs', xtype: 'button', listeners: { click: function () { selectmyfs(combo_myfs, field_TRADEWAYCODES, field_TRADEWAYCODES1); } }, text: '<span class="glyphicon glyphicon-search"></span>', flex: .15, margin: 0 }]
                }

                var store_mzbz = Ext.create('Ext.data.JsonStore', {
                    fields: ['CODE', 'NAME'],
                    data: common_data_mzbz
                })

                combo_mzbz = Ext.create('Ext.form.field.ComboBox', {//木质包装
                    name: 'WOODPACKINGID',
                    hideTrigger: true,
                    store: store_mzbz,
                    fieldLabel: '木质包装',
                    displayField: 'NAME',
                    valueField: 'CODE',
                    triggerAction: 'all',
                    forceSelection: true,
                    tabIndex: 21,
                    queryMode: 'local',
                    anyMatch: true,
                    listeners: {
                        focus: function (cb) {
                            if (!cb.getValue()) {
                                cb.clearInvalid();
                                cb.store.clearFilter();
                                cb.expand()
                            }
                        }
                    },
                    listConfig: {
                        maxHeight: 110
                    },
                    allowBlank: false,
                    blankText: '木质包装不能为空!',
                    listConfig: {
                        maxHeight: 110,
                        getInnerTpl: function () {
                            return '<div>{NAME}</div>';
                        }
                    }
                })

                field_CLEARANCENO = Ext.create('Ext.form.field.Text', {
                    tabIndex: 22,
                    fieldLabel: '通关单号',
                    name: 'CLEARANCENO'
                });

                //报关车号
                store_bgch = Ext.create('Ext.data.JsonStore', {
                    fields: ['CODE', 'NAME'],
                    data: common_data_truckno
                })
                field_bgch = Ext.create('Ext.form.field.ComboBox', {
                    id: 'DECLCARNO',
                    name: 'DECLCARNO',
                    store: store_bgch,
                    displayField: 'NAME',
                    valueField: 'CODE',
                    queryMode: 'local',
                    minChars: 2,
                    hideTrigger: true,
                    forceSelection: true,
                    tabIndex: 25,
                    flex: 0.85,
                    allowBlank: true,
                    anyMatch: true,
                    readOnly: true,
                    disabled: true,
                    margin: 0,
                    listConfig: {
                        maxHeight: 110,
                        getInnerTpl: function () {
                            return '<div>{NAME}</div>';
                        }
                    }
                })
                container_bgch = Ext.create('Ext.form.FieldContainer', {
                    id: 'fieldbgch',
                    disabled: true,
                    fieldLabel: '报关车号',
                    layout: 'hbox',
                    items: [field_bgch, {
                        id: 'bgch_button',
                        xtype: 'button', listeners: {
                            click: function () {
                                if (Ext.getCmp('DECLCARNO').disabled == false) {
                                    selectMyContainer();
                                }
                            }
                        }, text: '<span class="glyphicon glyphicon-search"></span>', flex: .15, margin: 0
                    }]
                })

                var chk_CHKLAWCONDITION = {
                    xtype: 'checkboxfield',
                    tabIndex: 23,
                    fieldLabel: '法检标志',
                    name: 'LAWCONDITION'
                }

                //集装箱号
                combo_containerno = Ext.create('Ext.form.field.Text', {
                    xtype: 'textfield',
                    name: 'CONTAINERNO',
                    id: 'CONTAINERNO',
                    tabIndex: 24,
                    readOnly: true,
                    allowBlank: true,
                    disabled: true,
                    margin: 0,
                    flex: 0.85
                })
                field_containerno = Ext.create('Ext.form.FieldContainer', {
                    id: 'fieldcontainer1',
                    disabled: true,
                    fieldLabel: '集装箱号',
                    layout: 'hbox',
                    items: [combo_containerno, {
                        xtype: 'button', listeners: {
                            click: function () {
                                if (Ext.getCmp('CONTAINERNO').disabled == false) {
                                    selectMyContainer();
                                }
                            }
                        },
                        text: '<span class="glyphicon glyphicon-search"></span>', flex: .15, margin: 0
                    }]
                })
                //集装箱号
                field_ContainerJson = Ext.create('Ext.form.field.Hidden', {
                    name: 'ContainerJson',
                    id: 'ContainerJson'
                })

                //需求备注
                field_ENTRUSTREQUEST = Ext.create('Ext.form.field.Text', {
                    tabIndex: 26,
                    fieldLabel: '需求备注',
                    name: 'ENTRUSTREQUEST'
                });

                //隐藏的字段
                field_ID = Ext.create('Ext.form.field.Hidden', {
                    name: 'ID'
                });
                var field_BUSIKIND = Ext.create('Ext.form.field.Hidden', {
                    name: 'BUSIKIND',
                    value: '001'
                });
                field_ORDERWAY = Ext.create('Ext.form.field.Hidden', {
                    name: 'ORDERWAY',
                    value: '1'
                });
                var field_ASSOCIATENO = Ext.create('Ext.form.field.Hidden', {
                    name: 'ASSOCIATENO'
                });
                var field_CLEARUNIT = Ext.create('Ext.form.field.Hidden', {
                    name: 'CLEARUNIT',
                });
                var field_CLEARUNITNAME = Ext.create('Ext.form.field.Hidden', {
                    name: 'CLEARUNITNAME',
                });
                var field_CUSTOMERCODE = Ext.create('Ext.form.field.Hidden', {
                    name: 'CUSTOMERCODE',
                });
                var field_CUSTOMERNAME = Ext.create('Ext.form.field.Hidden', {
                    name: 'CUSTOMERNAME',
                });

                var tbar_r = '<div><div class="btn-group" role="group">'
                        //+ '<button type="button" onclick="resetWin()" class="btn btn-primary btn-sm"><i class="fa fa-refresh"></i>&nbsp;重置</button>'
                        + '<button type="button" onclick="orderBack()" class="btn btn-primary btn-sm"><i class="fa fa-angle-double-left"></i>&nbsp;撤单</button>'
                        + '<button type="button" onclick="clearWin()" class="btn btn-primary btn-sm"><i class="fa fa-plus fa-fw"></i>&nbsp;新增</button>'
                        + '<button type="button" onclick="LoadOrderFzxzLoad()" class="btn btn-primary btn-sm"><i class="fa fa-files-o"></i>&nbsp;复制新增</button>'
                        + '<button type="button" onclick="save(\'tjdd\')" class="btn btn-primary btn-sm"><i class="fa fa-floppy-o"></i>&nbsp;保存</button>'
                        + '<button type="button" onclick="save(\'tjwt\')" class="btn btn-primary btn-sm"><i class="fa fa-hand-o-up"></i>&nbsp;提交委托</button></div>'
                var tbar_l = '<div><div class="btn-group" role="group">'
                        + '<button type="button" style="float:left; border: 1px solid transparent;border-radius:0px 0px 0px 0px;" id="pickfiles" class="btn-primary btn-sm"><i class="fa fa-upload"></i>&nbsp;上传文件<button>'
                        + '<button type="button" onclick="getFilesFromFtp()" class="btn btn-primary btn-sm"><i class="fa fa-level-down"></i>&nbsp;自动获取</button>'
                        + '<button type="button" onclick="browsefile()" class="btn btn-primary btn-sm"><i class="fa fa-exchange fa-fw"></i>&nbsp;浏览文件</button>'
                        + '<button type="button" class="btn btn-primary btn-sm"><i class="fa fa-print"></i>&nbsp;打印文件</button>'
                        + '<button type="button" onclick="removeFile()" class="btn btn-primary btn-sm"><i class="fa fa-trash-o"></i>&nbsp;删除文件</button></div>'

                store_filetype = Ext.create('Ext.data.JsonStore', {
                    fields: ['FILETYPEID', 'FILETYPENAME'],
                    proxy: {
                        type: 'ajax',
                        url: '/Common/getfiletype',
                        reader: {
                            root: 'rows',
                            type: 'json'
                        }
                    },
                    autoLoad: true
                })
                combo_filetype = Ext.create('Ext.form.field.ComboBox', {//文件类型
                    name: 'FILETYPEID',
                    value: 44,
                    store: store_filetype,
                    fieldLabel: '文件类型',
                    displayField: 'FILETYPENAME',
                    valueField: 'FILETYPEID',
                    queryMode: 'local',
                    labelWidth: 60,
                    width: 150,
                    forceSelection: true,
                    anyMatch: true,
                    listeners: {
                        focus: function () { if (!combo_filetype.getValue()) combo_filetype.expand(); },
                        select: function (records) { field_FILETYPENAME.setValue(records.rawValue); setWjsc(); }
                    }
                })

                field_FILETYPENAME = Ext.create('Ext.form.field.Hidden', {
                    name: 'FILETYPENAME'
                })
                var bbar = Ext.create('Ext.toolbar.Toolbar', {
                    items: [combo_filetype, tbar_l, '->', tbar_r]
                })

                var creatItems = [
                { layout: 'column', height: 42, margin: '5 0 0 0', border: 0, items: [field_CODE, combo_ENTRUSTTYPENAME, combo_REPWAYNAME, combo_CUSTOMDISTRICTNAME, cont_bgsbdw] },
                { layout: 'column', height: 42, border: 0, items: [combo_DECLWAY, field_SUBMITTIME, field_SUBMITUSERNAME, field_SUBMITUSERPHONE, cont_bjsbdw] },
                { layout: 'column', height: 42, border: 0, items: [field_CREATEUSERNAME, field_CREATETIME, field_CSNAME, field_CSPHONE, field_STATUS] },
                { layout: 'column', border: 42, border: 0, items: [label_busiinfo, chk_container] },
                { layout: 'column', height: 42, border: 0, items: [field_CUSNO, combo_PORTCODE, field_jydw, flightno, field_DIVIDENO] },
                { layout: 'column', height: 42, border: 0, items: [field_quanpackage, field_weight, field_contractno, field_myfs, field_MANIFEST] },
                { layout: 'column', height: 42, border: 0, items: [combo_mzbz, field_CLEARANCENO, chk_CHKLAWCONDITION, field_containerno, container_bgch] },
                { layout: 'column', height: 42, border: 0, items: [field_ENTRUSTREQUEST] },
                field_CUSTOMDISTRICTNAME, field_PORTNAME, field_BUSIUNITNAME, field_BUSISHORTCODE, field_BUSISHORTNAME, field_CUSTOMERCODE, field_CUSTOMERNAME
                , field_ID, field_BUSIKIND, field_ORDERWAY, field_ASSOCIATENO, field_CLEARUNIT, field_CLEARUNITNAME, field_TRADEWAYCODES, field_TRADEWAYCODES1, field_ContainerJson, field_CanEditFieldJson
                ];

                formpanel = Ext.create('Ext.form.Panel', {
                    renderTo: 'div_form',
                    border: 0,
                    minHeight: 350,
                    tbar: tbar,
                    bbar: bbar,
                    fieldDefaults: {
                        margin: '0 5 10 0',
                        labelWidth: 80,
                        columnWidth: .20,
                        labelAlign: 'right',
                        labelSeparator: '',
                        msgTarget: 'under',
                        validateOnBlur: false,
                        validateOnChange: false
                    },
                    items: creatItems
                });

                store = Ext.create('Ext.data.JsonStore', {
                    fields: ['ID', 'FILENAME', 'ORIGINALNAME', 'FILETYPE', 'FILETYPENAME', 'UPLOADTIME', 'SIZES', 'SIZESNAME', 'ISINDATA'],
                    proxy: {
                        type: 'ajax',
                        url: '/Common/getFile?OrderId=' + ID,
                        reader: {
                            root: 'rows',
                            type: 'json'
                        }
                    },
                    autoLoad: true,
                    listeners: {
                        load: function (store, records, options) {
                            if (ID && store.data.length != 0) {
                                setWjsc();
                            }
                        }
                    }
                })

                var tmp = new Ext.XTemplate(
                '<tpl for=".">',
                '<div class="panel panel-default thumb-wrap fl" style="margin-top:5px;margin-left:5px;width:240px">',
                '<div class="panel-heading" style="padding-left:5px;padding-right:5px">{[values.ORIGINALNAME.substr(0,23)]}<div class="fr"><span class="glyphicon glyphicon-paperclip"></span></div></div>',
                '<div class="panel-body" style="padding-left:5px;">{FILETYPENAME}|{SIZESNAME}|{UPLOADTIME}</div></div>',
                '</tpl>'
                )

                fileview = Ext.create('Ext.view.View', {
                    store: store,
                    tpl: tmp,
                    itemSelector: 'div.thumb-wrap',
                    multiSelect: true
                })
                var panel = Ext.create('Ext.panel.Panel', {
                    title: '<h4 style="margin-top:2px;margin-bottom:2px"><span class="label label-default"><i class="fa fa-chevron-circle-down"></i>&nbsp;随附文件</span></h4>',
                    renderTo: "div_panel",
                    border: 0,
                    width: '62%',
                    minHeight: 100,
                    items: [fileview]
                })

                //获得焦点
                Ext.getCmp('NUMBER').focus(false, 100);

                //上传文件控件
                uploader = new plupload.Uploader({
                    runtimes: 'html5,flash,silverlight,html4',
                    browse_button: 'pickfiles', // you can pass an id...
                    url: '/Common/UploadFile',
                    flash_swf_url: '/js/upload/Moxie.swf',
                    silverlight_xap_url: '/js/upload/Moxie.xap',
                    filters: {
                        max_file_size: '5000mb',
                        mime_types: [
                            { title: "Image files", extensions: "*" },
                            { title: "Zip files", extensions: "zip,rar" }
                        ]
                    },
                    init: {
                        PostInit: function () {
                        }
                    }
                });
                //修改的时候，加载表单
                if (Copy) {
                    formpanel.getForm().load({
                        url: "/Common/getOrderInfobyCode",
                        params: {
                            code: Copy
                        },
                        success: function (form, action) {
                            if (action.result.data.TRADEWAYCODES1 != null) {
                                combo_myfs.setValue(action.result.data.TRADEWAYCODES1.split(','));
                            }
                            tf_bgsbdw.setValue(action.result.data.REPUNITNAME + "(" + action.result.data.REPUNITCODE + ")");
                            tf_bjsbdw.setValue(action.result.data.INSPUNITNAME + "(" + action.result.data.INSPUNITCODE + ")");
                            //隐藏的集装箱json
                            //Ext.Ajax.request({
                            //    url: '/Common/getContainerList',
                            //    params: { Ordercode: field_CODE.getValue() },
                            //    method: 'GET',
                            //    success: function (response, options) {
                            //        var json = Ext.decode(response.responseText);
                            //        field_ContainerJson.setValue(json.rows);
                            //    }
                            //});
                            combo_containerno.setValue(action.result.data.CONTAINERNO);
                            field_bgch.setValue(action.result.data.DECLCARNO);
                            var formdata = formpanel.getForm().getValues();
                            field_CanEditFieldJson.setValue(Ext.encode(formdata));
                            LoadOrderFzxz();
                        }
                    });
                } else if (ID) {
                    formpanel.getForm().load({
                        url: "/OrderLandIn/getForm",
                        params: {
                            OrderId: ID
                        },
                        success: function (form, action) {
                            //store_myfs.insert(0, { CODE: action.result.data.TRADEWAYCODES1, NAME: action.result.data.TRADEWAYCODES1 });
                            //combo_myfs.setValue(action.result.data.TRADEWAYCODES1);
                            if (action.result.data.TRADEWAYCODES1 != null) {
                                combo_myfs.setValue(action.result.data.TRADEWAYCODES1.split(','));
                            }
                            tf_bgsbdw.setValue(action.result.data.REPUNITNAME + "(" + action.result.data.REPUNITCODE + ")");
                            tf_bjsbdw.setValue(action.result.data.INSPUNITNAME + "(" + action.result.data.INSPUNITCODE + ")");
                            //隐藏的集装箱json
                            Ext.Ajax.request({
                                url: '/Common/getContainerList',
                                params: { Ordercode: field_CODE.getValue() },
                                method: 'GET',
                                success: function (response, options) {
                                    var json = Ext.decode(response.responseText);
                                    field_ContainerJson.setValue(json.rows);
                                }
                            });
                            //store_containerno.insert(0, { CODE: action.result.data.CONTAINERNO, NAME: action.result.data.CONTAINERNO });
                            combo_containerno.setValue(action.result.data.CONTAINERNO);
                            field_bgch.setValue(action.result.data.DECLCARNO);
                            LoadButtonStyle();
                            setreadOnly();
                            var formdata = formpanel.getForm().getValues();
                            field_CanEditFieldJson.setValue(Ext.encode(formdata));
                        }
                    });
                } else {
                    //新增的时候，带出账号所属单位(申报单位)
                    Ext.Ajax.request({
                        url: "/Common/getSbdwInfo",
                        success: function (option, success, response) {
                            var data = Ext.decode(option.responseText);
                            if (data.success == true) {
                                tf_bgsbdw.setValue(data.REPUNITHSCODE);
                                tf_bjsbdw.setValue(data.REPUNITCIQCODE);
                                field_STATUS.setValue('草稿');
                                LoadButtonStyle();
                            }
                        }
                    });
                }

                Ext.Ajax.request({
                    url: "/Common/getSbdwInfo",
                    success: function (option, success, response) {
                        var data = Ext.decode(option.responseText);
                        if (data.success == true) {
                            repunitcode = data.REPUNITHSCODE;
                            inspunitcode = data.REPUNITCIQCODE;
                        }
                    }
                });

                fileTypeInit();

            }
        })

    });

    //提交订单
    function save(type) {
        //提交委托之后不能再提交委托
        if (!(field_STATUS.getValue() == "草稿" || field_STATUS.getValue() == "文件已上传") && type == "tjwt") {
            Ext.MessageBox.alert('提示', '订单已提交委托，不能重复提交！');
            return;
        }
        var fileJson = Ext.encode(Ext.pluck(store.data.items, 'data'));
        if (type == "tjwt" && store.data.items.length == 0) {
            Ext.MessageBox.alert('提示', '请上传文件！');
            return;
        }
        if (type == "tjwt" && formpanel.getForm().isValid() == false) {
            return;
        }
        var msg = "";
        if (type == "tjwt") {
            msg = "提交";
        } else {
            msg = "保存";
        }

        //验证一个月内客户编号是否重复
        var isKhbhRepeat = false;
        if (field_CUSNO.getValue() && saveAction == "saveAdd") {
            Ext.Ajax.request({
                url: '/Common/selectKhbh',
                method: "GET",
                async: false,   //ASYNC 是否异步( TRUE 异步 , FALSE 同步)
                params: {
                    CUSNO: field_CUSNO.getValue()
                },
                success: function (option, success, response) {
                    var data = Ext.decode(option.responseText);
                    if (data.success == true) {
                        isKhbhRepeat = true;
                    }
                }
            });
        }
        if (isKhbhRepeat) {
            if (!confirm("客户编号重复，是否继续保存？")) {
                return
            }
        }

        field_CUSTOMDISTRICTNAME.setValue(combo_CUSTOMDISTRICTNAME.getRawValue().substr(0, combo_CUSTOMDISTRICTNAME.getRawValue().lastIndexOf('(')));
        var formdata = formpanel.getForm().getValues();
        var myMask = new Ext.LoadMask(Ext.getBody(), { msg: "保存中,请稍等..." });
        myMask.show();

        Ext.Ajax.request({
            url: "/OrderLandIn/" + saveAction,
            params: { MasterId: 'MasterId', type: type, ID: ID, action: saveAction, json: Ext.encode(formdata), jsonStringWJ: fileJson, FILETYPEIDNUM: Ext.encode(FILETYPEIDNUMArray), field_CanEditFieldJson: field_CanEditFieldJson.getValue() },
            success: function (option, success, response) {
                if (myMask != undefined) { myMask.hide(); }
                var data = Ext.decode(option.responseText);
                if (data.success == true) {
                    //window.location.href = "/OrderLandIn/Create?OrderId=" + data.ORDERID;
                    setHistoryUrl("/OrderLandIn/Create?OrderId=" + data.ORDERID);
                    saveAction = "saveUpdate";
                    field_ID.setValue(data.ORDERID);
                    field_CODE.setValue(data.CODE);
                    field_SUBMITUSERNAME.setValue(data.SUBMITUSERNAME);
                    field_SUBMITTIME.setValue(data.SUBMITTIME);
                    field_SUBMITUSERPHONE.setValue(data.SUBMITUSERPHONE);
                    field_CREATEUSERNAME.setValue(data.CREATEUSERNAME);
                    field_CREATETIME.setValue(data.CREATETIME);
                    var fieldstatus = "";
                    if ((data.STATUS == '1')) {
                        fieldstatus = "草稿";
                    } else if ((data.STATUS == '10')) {
                        fieldstatus = "文件已上传";
                    } else if ((data.STATUS == '15')) {
                        fieldstatus = "订单已委托";
                    }
                    field_STATUS.setValue(fieldstatus);
                    LoadButtonStyle();
                    if (type == "tjwt") {
                        setreadOnly();
                    }
                    var formdata = formpanel.getForm().getValues();
                    field_CanEditFieldJson.setValue(Ext.encode(formdata));
                    Ext.MessageBox.alert('提示', msg + '成功！');
                } else {
                    Ext.MessageBox.alert('提示', msg + '失败！');
                }
            }
        });

    }

    //查询
    function LoadOrder() {
        if (field_noinput.getValue() == "") {
            Ext.MessageBox.alert("提示", "请输入编号！");
            return;
        }
        var myMask = new Ext.LoadMask(Ext.getBody(), { msg: "数据查询中,请稍等..." });
        myMask.show();

        Ext.Ajax.request({
            url: '/Common/GetOrderByCode',
            method: "GET",
            async: false,   //ASYNC 是否异步( TRUE 异步 , FALSE 同步)
            params: {
                code: field_noinput.getValue(), type: combo_notype.getValue(), busiType: '31'
            },
            success: function (option, success, response) {
                var data = Ext.decode(option.responseText);
                data = eval('(' + data + ')');

                if (data.data[0] == null) {
                    Ext.MessageBox.alert("提示", "数据不存在！");
                } else if (data.data.length > 1) {
                    Ext.MessageBox.alert("提示", "数据存在多条，请到列表页里查询！");
                } else {
                    OrderId = data.data[0].ID;
                    formpanel.getForm().load({
                        url: "/OrderLandIn/getForm",
                        params: {
                            OrderId: OrderId
                        },
                        success: function (form, action) {
                            ID = OrderId;
                            saveAction = "saveUpdate";
                            store_myfs.insert(0, { CODE: action.result.data.TRADEWAYCODES1, NAME: action.result.data.TRADEWAYCODES1 });
                            combo_myfs.setValue(action.result.data.TRADEWAYCODES1);
                            tf_bgsbdw.setValue(action.result.data.REPUNITNAME + "(" + action.result.data.REPUNITCODE + ")");
                            tf_bjsbdw.setValue(action.result.data.INSPUNITNAME + "(" + action.result.data.INSPUNITCODE + ")");
                            //获取ERP文件
                            store.removeAll();
                            Ext.Ajax.request({
                                url: "/Common/getLocalfile",
                                params: { 'id': field_noinput.getValue().replace(/(^\s*)|(\s*$)/g, ""), 'type': combo_notype.getValue() },
                                success: function (option, success, response) {
                                    var data = Ext.decode(option.responseText);
                                    $.each(data.rows, function (i, n) {
                                        var SIZESNAME = "";
                                        if (data.rows[i].FILE_SIZE > 1024 * 1024) {
                                            SIZESNAME = (Math.round(data.rows[i].SIZES / 1024 / 1024, 0) + "M");
                                        } else {
                                            SIZESNAME = (Math.round(data.rows[i].SIZES / 1024, 0) + "K");
                                        }
                                        store.insert(store.data.length,
                                       { ID: data.rows[i].ID, FILENAME: '/FileUpload/file/' + data.rows[i].FILENAME, ORIGINALNAME: data.rows[i].ORIGINALNAME, SIZES: data.rows[i].SIZES, SIZESNAME: SIZESNAME, FILETYPENAME: "订单文件", FILETYPE: "44", ISINDATA: "TRUE" });
                                    })

                                }
                            });
                            LoadButtonStyle();
                        }
                    });
                }

            }
        })

        if (myMask != undefined) { myMask.hide(); }

    }

    //加载表单Erp
    function LoadOrderErp() {
        if (field_CUSNO.getValue() != '' && field_CUSNO.getValue() != field_noinput.getValue()) {
            Ext.MessageBox.alert("提示", "请输入相同的客户编号！");
            field_noinput.focus();
            return;
        }
        var currFormData = formpanel.getForm().getValues();
        var myMask = new Ext.LoadMask(Ext.getBody(), { msg: "数据查询中,请稍等..." });
        myMask.show();
        //combo_jydw.reset();
        formpanel.getForm().load({
            url: "/OrderLandIn/GetOrderCodeErp",
            params: {
                id: field_noinput.getValue().replace(/(^\s*)|(\s*$)/g, "")
            },
            success: function (form, action) {
                var success = action.result.success;
                if (!success) {
                    if (myMask != undefined) { myMask.hide(); }
                    Ext.MessageBox.alert("提示", "数据不存在！");
                    return;
                }
                var erpData = action.result.data;
                afterLoadErp(formpanel, currFormData, erpData);
                if (saveAction == "saveAdd") {
                    field_CODE.setValue('');
                }
                LoadButtonStyle();

                if (field_STATUS.getValue() == "草稿" || field_STATUS.getValue() == "文件已上传") {
                    //获取ERP文件
                    store.removeAll();
                    Ext.Ajax.request({
                        url: "/Common/getErpfile",
                        params: { 'id': field_noinput.getValue().replace(/(^\s*)|(\s*$)/g, ""), type: 'landIn' },
                        success: function (option, success, response) {
                            var data = Ext.decode(option.responseText);
                            $.each(data.rows, function (i, n) {
                                var SIZESNAME = "";
                                if (data.rows[i].FILE_SIZE > 1024 * 1024) {
                                    SIZESNAME = (Math.round(data.rows[i].FILE_SIZE / 1024 / 1024, 0) + "M");
                                } else {
                                    SIZESNAME = (Math.round(data.rows[i].FILE_SIZE / 1024, 0) + "K");
                                }
                                store.insert(store.data.length,
                               { FILENAME: '/FileUpload/file/' + data.rows[i].MAINNAME.substr(data.rows[i].MAINNAME.lastIndexOf("CustomsFile") + 11), ORIGINALNAME: data.rows[i].MAINNAME.substr(data.rows[i].MAINNAME.lastIndexOf("CustomsFile") + 11), SIZES: data.rows[i].FILE_SIZE, SIZESNAME: SIZESNAME, FILETYPENAME: "订单文件", FILETYPE: "44", ISINDATA: "FALSE" });
                            })
                            if (myMask != undefined) { myMask.hide(); }
                        }
                    });
                } else {
                    if (myMask != undefined) { myMask.hide(); }
                }

            }, failure: function (XMLResponse) {
                if (myMask != undefined) { myMask.hide(); }
                Ext.MessageBox.alert("提示", "数据不存在！");
            }
        });
    }
    //复制新增
    function LoadOrderFzxzLoad() {
        if (field_CODE.getValue()) {
            window.location.href = "/OrderLandIn/Create?Copy=" + field_CODE.getValue();
        }
    }
    //复制新增
    function LoadOrderFzxz() {
        //复制新增清空的字段
        saveAction = "saveAdd";
        field_ID.setValue('');
        field_CODE.setValue('');
        field_contractno.setValue('');
        field_CLEARANCENO.setValue('');
        field_bgch.setValue('');
        //集装箱号报关车号
        field_bgch.setValue('');
        combo_containerno.setValue('');
        field_ContainerJson.setValue('');
        field_ENTRUSTREQUEST.setValue('');
        field_CUSNO.setValue('');
        field_noinput.setValue('');
        field_SUBMITUSERNAME.setValue('');
        field_SUBMITTIME.setValue('');
        field_SUBMITUSERPHONE.setValue('');
        field_CREATEUSERNAME.setValue('');
        field_CREATETIME.setValue('');
        field_CSNAME.setValue('');
        field_CSPHONE.setValue('');
        field_DIVIDENO.setValue('');
        Ext.getCmp('GOODSNW').setValue('');
        Ext.getCmp('FILGHTNO').setValue('');
        store.removeAll();
        field_STATUS.setValue('草稿');
        Ext.getCmp('GOODSNUM').setValue('');
        Ext.getCmp('GOODSGW').setValue('');
        setnotreadOnly();
        LoadButtonStyle();
    }

    //按钮的可用不可用控制
    function LoadButtonStyle() {
        combo_mzbz.setDisabled(false);
        //combo_INSPUNITCODE.setDisabled(false);
        //combo_REPUNITCODE.setDisabled(false);
        tf_bjsbdw.setDisabled(false);
        cont_bjsbdw.setDisabled(false);
        tf_bgsbdw.setDisabled(false);
        cont_bgsbdw.setDisabled(false);
        field_CLEARANCENO.setDisabled(false);
        //field_bgch.setDisabled(false);
        //委托类型是仅报关时、屏蔽木包装情况及报检申报单位
        if (combo_ENTRUSTTYPENAME.getValue() == "01") {
            combo_mzbz.setDisabled(true);
            combo_mzbz.setValue('');
            //combo_INSPUNITCODE.setDisabled(true);
            //combo_INSPUNITCODE.setValue('');
            cont_bjsbdw.setDisabled(true);
            tf_bjsbdw.setDisabled(true);
            tf_bjsbdw.setValue('');
        }

        //委托类型是仅报检时、屏蔽报关申报单位及报关车号、通关单号
        if (combo_ENTRUSTTYPENAME.getValue() == "02") {
            //combo_REPUNITCODE.setDisabled(true);
            //combo_REPUNITCODE.setValue('');
            cont_bgsbdw.setDisabled(true);
            tf_bgsbdw.setDisabled(true);
            tf_bgsbdw.setValue('');
            field_CLEARANCENO.setDisabled(true);
            field_CLEARANCENO.setValue('');
        }
        //委托类型是报关报检时、屏蔽通关单号字段
        if (combo_ENTRUSTTYPENAME.getValue() == "03") {
            field_CLEARANCENO.setDisabled(true);
            field_CLEARANCENO.setValue('');
        }

        //报关车号只有在申报方式是提前申报时才可维护，其他时屏蔽此字段
        if (combo_REPWAYNAME.getRawValue().indexOf("提前申报") < 0) {
            field_bgch.setDisabled(true);
            container_bgch.setDisabled(true);
            field_bgch.setValue("");
        }

        if (combo_REPWAYNAME.getValue() == "001" || combo_REPWAYNAME.getValue() == "007") {//申报方式是一般进口或一般出口，屏蔽货物类型，集装箱号及报关车号维护
            Ext.getCmp('CONTAINERNO').setValue("");
            Ext.getCmp('CONTAINERNO').setDisabled(true);
            Ext.getCmp('DECLCARNO').setValue("");
            Ext.getCmp('DECLCARNO').setDisabled(true);
        }
        buttonStatusChange();

    }

    //重置
    function clearWin() {
        location.href = "/OrderLandIn/Create";
    }

    //重置
    function resetWin() {
        if (!ID) {
            location.href = "/OrderLandIn/Create";
        } else {
            location.href = "/OrderLandIn/Create?OrderId=" + ID;
        }
    }

</script>


<div class="container">
    <div class="fr navposition">
        <span>当前位置:订单中心》陆进委托</span>
    </div>
    <div id="div_form" class="fr"></div>
    <div id="div_panel"></div>
</div>
